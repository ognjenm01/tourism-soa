version: "3.7"
services:
  tours-module:
    build:
      context: ./
      dockerfile: module_tour/Dockerfile
    image: toursmodule
    container_name: tours_module
    restart: always
    networks:
      - servers
    ports:
      - "${TOURS_APP_PORT}:${TOURS_APP_PORT}"
    environment:
      TOURS_DB_HOST: ${TOURS_DB_HOST}
      TOURS_DB_USERNAME: ${TOURS_DB_USERNAME}
      TOURS_DB_PASSWORD: ${TOURS_DB_PASSWORD}
      TOURS_DB: ${TOURS_DB}
      TOURS_DB_PORT: ${TOURS_DB_PORT}
      TOURS_SCHEMA: ${TOURS_SCHEMA}
      TOURS_APP_PORT: ${TOURS_APP_PORT}
    depends_on:
      - database

  followers-module:
    build:
      context: ./module_follower
      dockerfile: Dockerfile
    image: followersmodule
    container_name: followers_module
    restart: always
    networks:
      - servers
    ports:
      - "${FOLLOWERS_APP_PORT}:${FOLLOWERS_APP_PORT}"
    environment:
      NEO4J_PORT: ${NEO4J_PORT}
      NEO4J_PORT_BOLT: ${NEO4J_PORT_BOLT}
      NEO4J_DB_URI: ${NEO4J_DB_URI}
    depends_on:
      - database

  explorer:
    build:
      dockerfile: tourism_monolith/Dockerfile
      context: .
      target: final
    image: explorer
    container_name: explorer
    restart: on-failure
    networks:
      - servers
    ports:
      - "44333:443"
      - "1234:80"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer-v1
      TOURS_APP_PORT: ${TOURS_APP_PORT}
      ASPNETCORE_URLS: https://+:443;http://+:80
    depends_on:
      - database
  
  database:
    image: postgres
    container_name: postgres_container
    restart: always
    networks:
      - servers
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_DB: explorer-v1
    volumes:
      - database-data:/var/lib/postgresql/data
    
  mongo-db:
    image: mongo
    container_name: mongo-db
    restart: always
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}"
    environment:
      MONGO_INITDB_DATABASE: mongoDemo
    networks:
      - servers

  neo4j-db:
    image: neo4j
    container_name: neo4j-db
    ports:
    - "${NEO4J_PORT}:${NEO4J_PORT}"
    - "${NEO4J_PORT_BOLT}:${NEO4J_PORT_BOLT}"
    environment:
      NEO4J_AUTH: none
    networks:
    - servers
  
  blogs-module:
    build: 
      context: ./
      dockerfile: module_blog/Dockerfile
    image: blogsmodule
    container_name: blogs_module
    restart: always
    networks:
      - servers
    ports:
      - "${BLOGS_APP_PORT}:${BLOGS_APP_PORT}"
    environment:
      BLOGS_DB_HOST: ${BLOGS_DB_HOST}
      BLOGS_DB_USERNAME: ${BLOGS_DB_USERNAME}
      BLOGS_DB_PASSWORD: ${BLOGS_DB_PASSWORD}
      BLOGS_DB: ${BLOGS_DB}
      BLOGS_DB_PORT: ${BLOGS_DB_PORT}
      BLOGS_SCHEMA: ${BLOGS_SCHEMA}
      BLOGS_APP_PORT: ${BLOGS_APP_PORT}
    depends_on:
      - mongo-db
      - database


volumes:
  database-data:
    name: server-database

networks:
  servers:
    name: servers
    driver: bridge