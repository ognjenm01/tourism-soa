// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/tour/tour_service.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TourProgressServiceClient is the client API for TourProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourProgressServiceClient interface {
	CreateTourProgress(ctx context.Context, in *TourProgress, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetAllTourProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MultiTourProgressResponse, error)
	GetTourProgressById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TourProgressResponse, error)
	UpdateTourProgress(ctx context.Context, in *TourProgress, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteTourProgress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type tourProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourProgressServiceClient(cc grpc.ClientConnInterface) TourProgressServiceClient {
	return &tourProgressServiceClient{cc}
}

func (c *tourProgressServiceClient) CreateTourProgress(ctx context.Context, in *TourProgress, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/tour.TourProgressService/CreateTourProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourProgressServiceClient) GetAllTourProgress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MultiTourProgressResponse, error) {
	out := new(MultiTourProgressResponse)
	err := c.cc.Invoke(ctx, "/tour.TourProgressService/GetAllTourProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourProgressServiceClient) GetTourProgressById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TourProgressResponse, error) {
	out := new(TourProgressResponse)
	err := c.cc.Invoke(ctx, "/tour.TourProgressService/GetTourProgressById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourProgressServiceClient) UpdateTourProgress(ctx context.Context, in *TourProgress, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/tour.TourProgressService/UpdateTourProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourProgressServiceClient) DeleteTourProgress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/tour.TourProgressService/DeleteTourProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourProgressServiceServer is the server API for TourProgressService service.
// All implementations should embed UnimplementedTourProgressServiceServer
// for forward compatibility
type TourProgressServiceServer interface {
	CreateTourProgress(context.Context, *TourProgress) (*EmptyResponse, error)
	GetAllTourProgress(context.Context, *Empty) (*MultiTourProgressResponse, error)
	GetTourProgressById(context.Context, *Id) (*TourProgressResponse, error)
	UpdateTourProgress(context.Context, *TourProgress) (*EmptyResponse, error)
	DeleteTourProgress(context.Context, *Id) (*EmptyResponse, error)
}

// UnimplementedTourProgressServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTourProgressServiceServer struct {
}

func (UnimplementedTourProgressServiceServer) CreateTourProgress(context.Context, *TourProgress) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourProgress not implemented")
}
func (UnimplementedTourProgressServiceServer) GetAllTourProgress(context.Context, *Empty) (*MultiTourProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTourProgress not implemented")
}
func (UnimplementedTourProgressServiceServer) GetTourProgressById(context.Context, *Id) (*TourProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourProgressById not implemented")
}
func (UnimplementedTourProgressServiceServer) UpdateTourProgress(context.Context, *TourProgress) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourProgress not implemented")
}
func (UnimplementedTourProgressServiceServer) DeleteTourProgress(context.Context, *Id) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourProgress not implemented")
}

// UnsafeTourProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourProgressServiceServer will
// result in compilation errors.
type UnsafeTourProgressServiceServer interface {
	mustEmbedUnimplementedTourProgressServiceServer()
}

func RegisterTourProgressServiceServer(s grpc.ServiceRegistrar, srv TourProgressServiceServer) {
	s.RegisterService(&TourProgressService_ServiceDesc, srv)
}

func _TourProgressService_CreateTourProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourProgressServiceServer).CreateTourProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TourProgressService/CreateTourProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourProgressServiceServer).CreateTourProgress(ctx, req.(*TourProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourProgressService_GetAllTourProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourProgressServiceServer).GetAllTourProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TourProgressService/GetAllTourProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourProgressServiceServer).GetAllTourProgress(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourProgressService_GetTourProgressById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourProgressServiceServer).GetTourProgressById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TourProgressService/GetTourProgressById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourProgressServiceServer).GetTourProgressById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourProgressService_UpdateTourProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourProgressServiceServer).UpdateTourProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TourProgressService/UpdateTourProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourProgressServiceServer).UpdateTourProgress(ctx, req.(*TourProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourProgressService_DeleteTourProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourProgressServiceServer).DeleteTourProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TourProgressService/DeleteTourProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourProgressServiceServer).DeleteTourProgress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// TourProgressService_ServiceDesc is the grpc.ServiceDesc for TourProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.TourProgressService",
	HandlerType: (*TourProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTourProgress",
			Handler:    _TourProgressService_CreateTourProgress_Handler,
		},
		{
			MethodName: "GetAllTourProgress",
			Handler:    _TourProgressService_GetAllTourProgress_Handler,
		},
		{
			MethodName: "GetTourProgressById",
			Handler:    _TourProgressService_GetTourProgressById_Handler,
		},
		{
			MethodName: "UpdateTourProgress",
			Handler:    _TourProgressService_UpdateTourProgress_Handler,
		},
		{
			MethodName: "DeleteTourProgress",
			Handler:    _TourProgressService_DeleteTourProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tour/tour_service.proto",
}

// TouristPositionServiceClient is the client API for TouristPositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TouristPositionServiceClient interface {
	CreateTouristPosition(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetTouristPositionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TouristPositionResponse, error)
	GetTouristPositionByUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TouristPositionResponse, error)
	UpdateTouristPosition(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type touristPositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTouristPositionServiceClient(cc grpc.ClientConnInterface) TouristPositionServiceClient {
	return &touristPositionServiceClient{cc}
}

func (c *touristPositionServiceClient) CreateTouristPosition(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/tour.TouristPositionService/CreateTouristPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) GetTouristPositionById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TouristPositionResponse, error) {
	out := new(TouristPositionResponse)
	err := c.cc.Invoke(ctx, "/tour.TouristPositionService/GetTouristPositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) GetTouristPositionByUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TouristPositionResponse, error) {
	out := new(TouristPositionResponse)
	err := c.cc.Invoke(ctx, "/tour.TouristPositionService/GetTouristPositionByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) UpdateTouristPosition(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/tour.TouristPositionService/UpdateTouristPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TouristPositionServiceServer is the server API for TouristPositionService service.
// All implementations should embed UnimplementedTouristPositionServiceServer
// for forward compatibility
type TouristPositionServiceServer interface {
	CreateTouristPosition(context.Context, *TouristPosition) (*EmptyResponse, error)
	GetTouristPositionById(context.Context, *Id) (*TouristPositionResponse, error)
	GetTouristPositionByUser(context.Context, *Id) (*TouristPositionResponse, error)
	UpdateTouristPosition(context.Context, *TouristPosition) (*EmptyResponse, error)
}

// UnimplementedTouristPositionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTouristPositionServiceServer struct {
}

func (UnimplementedTouristPositionServiceServer) CreateTouristPosition(context.Context, *TouristPosition) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTouristPosition not implemented")
}
func (UnimplementedTouristPositionServiceServer) GetTouristPositionById(context.Context, *Id) (*TouristPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouristPositionById not implemented")
}
func (UnimplementedTouristPositionServiceServer) GetTouristPositionByUser(context.Context, *Id) (*TouristPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouristPositionByUser not implemented")
}
func (UnimplementedTouristPositionServiceServer) UpdateTouristPosition(context.Context, *TouristPosition) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTouristPosition not implemented")
}

// UnsafeTouristPositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TouristPositionServiceServer will
// result in compilation errors.
type UnsafeTouristPositionServiceServer interface {
	mustEmbedUnimplementedTouristPositionServiceServer()
}

func RegisterTouristPositionServiceServer(s grpc.ServiceRegistrar, srv TouristPositionServiceServer) {
	s.RegisterService(&TouristPositionService_ServiceDesc, srv)
}

func _TouristPositionService_CreateTouristPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouristPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).CreateTouristPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TouristPositionService/CreateTouristPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).CreateTouristPosition(ctx, req.(*TouristPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_GetTouristPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).GetTouristPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TouristPositionService/GetTouristPositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).GetTouristPositionById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_GetTouristPositionByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).GetTouristPositionByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TouristPositionService/GetTouristPositionByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).GetTouristPositionByUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_UpdateTouristPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouristPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).UpdateTouristPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tour.TouristPositionService/UpdateTouristPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).UpdateTouristPosition(ctx, req.(*TouristPosition))
	}
	return interceptor(ctx, in, info, handler)
}

// TouristPositionService_ServiceDesc is the grpc.ServiceDesc for TouristPositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TouristPositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.TouristPositionService",
	HandlerType: (*TouristPositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTouristPosition",
			Handler:    _TouristPositionService_CreateTouristPosition_Handler,
		},
		{
			MethodName: "GetTouristPositionById",
			Handler:    _TouristPositionService_GetTouristPositionById_Handler,
		},
		{
			MethodName: "GetTouristPositionByUser",
			Handler:    _TouristPositionService_GetTouristPositionByUser_Handler,
		},
		{
			MethodName: "UpdateTouristPosition",
			Handler:    _TouristPositionService_UpdateTouristPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tour/tour_service.proto",
}
